---
interface Props {
  icons: { src: string; w: string; h: string; alt?: string }[];
  forward?: boolean;
}

const { icons, forward } = Astro.props;
---

<slider-component forward={forward}>
  <div class="w-full overflow-hidden">
    <div
      class="slider gap-6 sm:gap-16"
      style={{ display: "-webkit-inline-box", opacity: 0 }}
    >
      <div class="slider-track w-auto flex gap-6 sm:gap-16">
        {
          icons.map((icon) => (
            <div
              class="m-auto max-sm:scale-75"
              style={{ width: icon.w + "px", height: icon.h + "px" }}
            >
              <img
                class="w-full h-full"
                src={icon.src}
                width={icon.w}
                height={icon.h}
                alt={icon.alt ?? ""}
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</slider-component>

<style>
  :host {
    --slider-start-x-pos: 0;
    --slider-end-x-pos: 0;
  }

  @keyframes sliderAnim {
    from {
      transform: translateX(var(--slider-start-x-pos));
    }
    to {
      transform: translateX(var(--slider-end-x-pos));
    }
  }

  .slider {
    animation-name: sliderAnim;
    animation-duration: 25s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
  }
</style>

<script>
  customElements.define(
    "slider-component",
    class extends HTMLElement {
      constructor() {
        super();

        const slider = this.querySelector(".slider");

        const sliderTrack = this.querySelector(".slider-track");

        if (!slider || !sliderTrack) {
          throw new Error("dont exist");
        }

        const to = "0";

        const isMobile = window.innerWidth <= 640

        const from = -sliderTrack.clientWidth - (isMobile ? 24 : 64) + "px";

        const forward = this.hasAttribute("forward");

        this.style.setProperty("--slider-end-x-pos", forward ? to : from);

        this.style.setProperty("--slider-start-x-pos", forward ? from : to);

        const cloneCount =
          1 +
          Math.ceil(
            (window.innerWidth - sliderTrack.clientWidth) /
              sliderTrack.clientWidth
          );

        for (let i = 0; i < cloneCount; i++) {
          slider.appendChild(sliderTrack.cloneNode(true));
        }

        slider.style.opacity = 1;
      }
    }
  );
</script>
